<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ianthe's]]></title>
  <link href="http://iolanthe.github.io/atom.xml" rel="self"/>
  <link href="http://iolanthe.github.io/"/>
  <updated>2014-03-18T13:23:25+08:00</updated>
  <id>http://iolanthe.github.io/</id>
  <author>
    <name><![CDATA[iolanthe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Structure--排序]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/paixu/"/>
    <updated>2014-03-18T13:16:02+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/paixu</id>
    <content type="html"><![CDATA[<h1>希尔排序</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//------------希尔排序------------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'><span class="c1">//希尔排序类定义</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ShellSort</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">SList</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//存储数据列表</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Len</span><span class="p">;</span><span class="c1">//实际包含的数据个数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Delta</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//希尔排序的间隔数组</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">DLen</span><span class="p">;</span><span class="c1">//Delta数组的实际长度</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ShellInsert</span><span class="p">(</span><span class="kt">int</span> <span class="n">dk</span><span class="p">);</span><span class="c1">//根据间隔dk做插入排序，被函数Sort调用</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">InitList</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">ilist</span><span class="p">[]);</span><span class="c1">//读取输入的数据放入SList中</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Sort</span><span class="p">();</span><span class="c1">//对SList数组排序</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Print</span><span class="p">();</span><span class="c1">//把排序后的数据输出，注意调用Sort函数之后再调用本函数</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//数据初始化，参数n表示输入n个数据，参数list表示外来输入的数据</span>
</span><span class='line'><span class="kt">void</span> <span class="n">ShellSort</span><span class="o">::</span><span class="n">InitList</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">ilist</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>  <span class="n">DLen</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Len</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span><span class="c1">//把参数n放入Len</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">Len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">SList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">ilist</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="c1">//把数组ilist放入SList中</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Delta</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//用于设置间隔数组Delta</span>
</span><span class='line'>    <span class="n">gap</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//用于实现n循环除2直到1，并把结果放入Delta数组中</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>  <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">gap</span><span class="o">=</span><span class="n">gap</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Delta</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">gap</span><span class="p">;</span>
</span><span class='line'>      <span class="n">DLen</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">gap</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//希尔排序</span>
</span><span class='line'><span class="kt">void</span> <span class="n">ShellSort</span><span class="o">::</span><span class="n">Sort</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">DLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">ShellInsert</span><span class="p">(</span><span class="n">Delta</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="c1">//一趟增量为data[k]的插入排序</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//希尔插入</span>
</span><span class='line'><span class="kt">void</span> <span class="n">ShellSort</span><span class="o">::</span><span class="n">ShellInsert</span><span class="p">(</span><span class="kt">int</span> <span class="n">dk</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//根据增量dk做插入排序，被函数Sort调用</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">dk</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">Len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">SList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">SList</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">dk</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">SList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">SList</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">dk</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">SList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">SList</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">-=</span><span class="n">dk</span><span class="p">)</span>
</span><span class='line'>              <span class="n">SList</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">dk</span><span class="p">]</span> <span class="o">=</span> <span class="n">SList</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="n">SList</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">dk</span><span class="p">]</span> <span class="o">=</span> <span class="n">SList</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//希尔排序数据输出，数据之间用空格隔开，被Sort函数调用</span>
</span><span class='line'><span class="kt">void</span> <span class="n">ShellSort</span><span class="o">::</span><span class="n">Print</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="c1">//把SList数据逐个输出，并用空格隔开</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">Len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">SList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">ShellSort</span> <span class="n">myShell</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="c1">//输入数据后，用InitList函数读取输入的数据</span>
</span><span class='line'>      <span class="n">myShell</span><span class="p">.</span><span class="n">InitList</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>      <span class="n">myShell</span><span class="p">.</span><span class="n">Sort</span><span class="p">();</span><span class="c1">//排序</span>
</span><span class='line'>      <span class="n">myShell</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span><span class="c1">//输出</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>快速排序</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//实现快速排序</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuickSort</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">QList</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//存储数据列表</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Len</span><span class="p">;</span><span class="c1">//实际包含的数据个数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">low</span><span class="p">,</span><span class="kt">int</span> <span class="n">high</span><span class="p">);</span><span class="c1">//交换数据位置，定枢轴</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">QSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">low</span><span class="p">,</span><span class="kt">int</span> <span class="n">high</span><span class="p">);</span><span class="c1">//快速排序，私有函数</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">InitList</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">ilist</span><span class="p">[]);</span><span class="c1">//读取输入的数据放入SList中</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Sort</span><span class="p">();</span><span class="c1">//公有函数，对QList进行快速排序</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Print</span><span class="p">();</span><span class="c1">//把排序后的数据输出，注意调用Sort函数之后再调用本函数</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//数据初始化，参数n表示输入n个数据，参数ilist表示外来输入的数据</span>
</span><span class='line'><span class="kt">void</span> <span class="n">QuickSort</span><span class="o">::</span><span class="n">InitList</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">ilist</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="c1">//把输入的数据放入ilist、设置数据序列长度</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Len</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">QList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">ilist</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//快速排序，公有函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">QuickSort</span><span class="o">::</span><span class="n">Sort</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">QSort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">Len</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//快速排序，私有函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">QuickSort</span><span class="o">::</span><span class="n">QSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">low</span><span class="p">,</span><span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>  <span class="c1">//对数据序列中的子序列[low..high]进行快速排序</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivotloc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pivotloc</span> <span class="o">=</span> <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//注意本程序数组是从位置0开始存储数据</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">pivotloc</span> <span class="o">=</span> <span class="n">Partition</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">pivotloc</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">QSort</span><span class="p">(</span><span class="n">pivotloc</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// QSort</span>
</span><span class='line'><span class="c1">//快速排序，实现数据交换操作的函数，函数返回枢轴记录的位置</span>
</span><span class='line'><span class="kt">int</span> <span class="n">QuickSort</span><span class="o">::</span><span class="n">Partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>  <span class="c1">//当发现数据顺序不对就交换双方位置，最终使枢轴记录插入合适位置</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivotkey</span> <span class="o">=</span> <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">QList</span><span class="p">[</span><span class="n">high</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">pivotkey</span><span class="p">)</span>
</span><span class='line'>          <span class="o">--</span><span class="n">high</span><span class="p">;</span>
</span><span class='line'>      <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">QList</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">pivotkey</span><span class="p">)</span>
</span><span class='line'>          <span class="o">++</span><span class="n">low</span><span class="p">;</span>
</span><span class='line'>      <span class="n">QList</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">QList</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotkey</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">low</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// Partition</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//排序后数据输出，数据之间用空格隔开</span>
</span><span class='line'><span class="kt">void</span> <span class="n">QuickSort</span><span class="o">::</span><span class="n">Print</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">QList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">QuickSort</span> <span class="n">mySort</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="c1">//输入数据后，用InitList函数读取输入的数据</span>
</span><span class='line'>      <span class="n">mySort</span><span class="p">.</span><span class="n">InitList</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mySort</span><span class="p">.</span><span class="n">Sort</span><span class="p">();</span>
</span><span class='line'>      <span class="n">mySort</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--二叉排序树]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/erchapaixushu/"/>
    <updated>2014-03-18T13:13:26+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/erchapaixushu</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define ok 1</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'>  <span class="c1">//-------------树结点和树定义---------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BiTreeNode</span><span class="c1">//二叉树结点</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span><span class="c1">//结点数据</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">LeftChild</span><span class="p">;</span><span class="c1">//左子树指针</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">RightChild</span><span class="p">;</span><span class="c1">//右子树指针</span>
</span><span class='line'>   <span class="c1">//构造函数和析构函数</span>
</span><span class='line'>  <span class="n">BiTreeNode</span><span class="p">()</span><span class="o">:</span><span class="n">LeftChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">RightChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">BiTreeNode</span><span class="p">(){};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BST</span><span class="c1">//排序二叉树</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">Root</span><span class="p">;</span><span class="c1">//根节点指针</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Pnum</span><span class="p">;</span>  <span class="c1">//树节点数量</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Stimes</span><span class="p">;</span><span class="c1">//比较次数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Traverse</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Create</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">val</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Insert</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Search</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Del</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">DelP</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">);</span><span class="c1">//真正执行删除操作的函数</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BST</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="o">:</span><span class="n">Root</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){};</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">BST</span><span class="p">(</span><span class="kt">void</span><span class="p">){};</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">();</span><span class="c1">//销毁函数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Traverse</span><span class="p">();</span><span class="c1">//使用中序遍历将数据有序输出</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Create</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">val</span><span class="p">[]);</span><span class="c1">//根据原始数据序列创建树</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//在树中插入新结点</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Search</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//查找数据是否存在，成功返回比较次数，失败返回-1</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Del</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//删除指定数据，成功返回ok，失败则返回error</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//----------删除函数----------</span>
</span><span class='line'><span class="c1">//二叉排序树删除</span>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Del</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Del</span><span class="p">(</span><span class="n">Root</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Del</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="c1">//删除成功返回ok,删除失败返回error</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span> <span class="c1">//T为空，删除失败，返回error</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span> <span class="c1">//比较T的data值与key值</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">DelP</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Del</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Del</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">DelP</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//真正执行删除的函数</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span>  <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">)</span>   <span class="c1">// T右子树空，则重接它的左子树</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>      <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">)</span>   <span class="c1">// T左子树空，则重接它的右子树</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>      <span class="n">T</span> <span class="o">=</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>  <span class="c1">//T左右子树都不空，则找出T左子树最大的右孩子，进行替换，然后重接最大右孩子的左子树</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">)</span>   <span class="c1">// ×a×ó￡?è?oó?òóòμ???í•</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>          <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>                  <span class="c1">// s???ò±?é??áμ?μ?ì????áμ?</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">RightChild</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">;</span>  <span class="c1">// ???ó*qμ?óò×óê÷</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">LeftChild</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">;</span>         <span class="c1">// ???ó*qμ?×ó×óê÷</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">// Delete</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//---------------------查找函数---------------</span>
</span><span class='line'><span class="c1">//二叉排序树查找</span>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Search</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span><span class="c1">//如果成功返回比较次数Stimes，如果失败返回-1</span>
</span><span class='line'>  <span class="n">Stimes</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Search</span><span class="p">(</span><span class="n">Root</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Stimes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Search</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//私有函数类内实现 </span>
</span><span class='line'><span class="p">{</span> <span class="c1">//在算法理论中的比较一次，在实质代码中是比较3次，但我们仍当一次处理</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span> <span class="c1">//T为空</span>
</span><span class='line'>        <span class="n">Stimes</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">//查找失败，，把Stimes设为-1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span> <span class="c1">//比较T的data值与key值，注意Stimes放在合适位置</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Stimes</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Stimes</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Search</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Stimes</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Search</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">Stimes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------销毁和创建函数-----------------</span>
</span><span class='line'><span class="c1">//销毁二叉树</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Destroy</span><span class="p">(</span><span class="n">Root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span><span class="c1">//私有函数，类内实现</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">LeftChild</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">RightChild</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//根据数据序列，创建二叉排序树</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">val</span><span class="p">[])</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Pnum</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Root</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Create</span><span class="p">(</span><span class="n">Root</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">val</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="c1">//私有函数，类内实现</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Pnum</span> <span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//创建树实际就是把序列val的数值逐个插入</span>
</span><span class='line'>      <span class="n">Insert</span> <span class="p">(</span><span class="n">Root</span><span class="p">,</span><span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----------------插入和遍历函数-----------------</span>
</span><span class='line'><span class="c1">//插入新结点</span>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Insert</span><span class="p">(</span><span class="n">Root</span><span class="p">,</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">BST</span><span class="o">::</span><span class="n">Insert</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//私有函数，类内实现</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span><span class="c1">//T为空，创建新结点</span>
</span><span class='line'>  <span class="p">{</span><span class="c1">//把T实体化，把key的值放入T中,设置T的左右孩子为空</span>
</span><span class='line'>      <span class="n">T</span><span class="o">=</span> <span class="k">new</span> <span class="n">BiTreeNode</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">else</span><span class="c1">//T不为空，进行比较，找寻要插入的位置</span>
</span><span class='line'>  <span class="p">{</span><span class="c1">//比较T的data值与key值</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">key</span> <span class="o">==</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="p">)</span> <span class="c1">//如果等于则说明数值已经存在树中，返回error表示报错</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">)</span><span class="c1">//如果是不等，从左子树或右子树递归查找</span>
</span><span class='line'>          <span class="n">Insert</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">Insert</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//使用中序遍历将数据有序输出</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Traverse</span><span class="p">()</span><span class="c1">//公有函数，对外接口</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Traverse</span><span class="p">(</span><span class="n">Root</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BST</span><span class="o">::</span><span class="n">Traverse</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//私有函数，类内实现</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="c1">//中序遍历代码</span>
</span><span class='line'>      <span class="n">Traverse</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">LeftChild</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Traverse</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">RightChild</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span> <span class="p">,</span><span class="n">j</span> <span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">tkey</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">val</span><span class="p">[</span><span class="mi">800</span><span class="p">];</span>
</span><span class='line'>  <span class="n">BST</span> <span class="n">myTree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//创建二叉排序树</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入n个数据，放在数组val中</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">val</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">val</span><span class="p">);</span><span class="c1">//创建</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Traverse</span><span class="p">();</span><span class="c1">//遍历树，输出有序序列</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//----------插入---------</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">tkey</span><span class="p">;</span>
</span><span class='line'>          <span class="n">myTree</span><span class="p">.</span><span class="n">Insert</span><span class="p">(</span><span class="n">tkey</span><span class="p">);</span><span class="c1">//每输入一个数据就调用</span>
</span><span class='line'>          <span class="n">myTree</span><span class="p">.</span><span class="n">Traverse</span><span class="p">();</span><span class="c1">//输出有序序列</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">//---------查找----------</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入要查找的数据个数</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">tkey</span><span class="p">;</span><span class="c1">//每输入一个数据就调用</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">myTree</span><span class="p">.</span><span class="n">Search</span><span class="p">(</span><span class="n">tkey</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出查找次数</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">//------------删除----------</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入要删除的数据个数</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">tkey</span><span class="p">;</span><span class="c1">//每输入一个数据就调用Del</span>
</span><span class='line'>          <span class="n">myTree</span><span class="p">.</span><span class="n">Del</span><span class="p">(</span><span class="n">tkey</span><span class="p">);</span>
</span><span class='line'>          <span class="n">myTree</span><span class="p">.</span><span class="n">Traverse</span><span class="p">();</span><span class="c1">//输出有序序列</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--查找]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/chazhao/"/>
    <updated>2014-03-18T13:11:21+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/chazhao</id>
    <content type="html"><![CDATA[<h1>静态查找</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'><span class="c1">//-----------队列定义和顺序查找函数------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Seq</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//存储数据队列，位置从1开始</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Len</span><span class="p">;</span><span class="c1">//队列实际长度</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[]);</span><span class="c1">//读取输入的数据，设置队列</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">SeqSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//顺序查找，如果队列中有记录key,返回记录位置，如果没有-1</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Seq</span><span class="o">::</span><span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="c1">//把输入数据读入到队列SeqList中</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Len</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span><span class="c1">//设置队列的实际长度</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//队列位置从1开始</span>
</span><span class='line'>      <span class="n">SeqList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Seq</span><span class="o">::</span><span class="n">SeqSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//带哨兵的顺序查找</span>
</span><span class='line'><span class="p">{</span><span class="c1">//队列位置从1开始</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SeqList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">key</span><span class="p">;</span>   <span class="c1">//设置哨兵</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">Len</span><span class="p">;</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="n">key</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">);</span><span class="c1">//从SeqList的末尾开始比较，找与key相等的记录</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">error</span><span class="p">;</span><span class="c1">//查找失败返回error</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span><span class="c1">//查找成功返回位置</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Seq</span> <span class="n">mySeq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入数据队列长度</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//输入队列数据 作顺序表</span>
</span><span class='line'>  <span class="n">mySeq</span><span class="p">.</span><span class="n">SetSeq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cin</span> <span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">//输入要查找的记录数量</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">key</span><span class="p">;</span><span class="c1">//输入要查找的数据key</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="n">mySeq</span><span class="p">.</span><span class="n">SeqSearch</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="c1">//使用顺序查找</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="n">error</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">n</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出找到的位置</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//-------------------折半查找---------------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Seq</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//存储数据队列，位置从1开始</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Len</span><span class="p">;</span><span class="c1">//队列实际长度</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[]);</span><span class="c1">//读取输入的数据，设置队列</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">BinSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//折半查找，如果队列中有记录key,返回记录位置，如果没有-1</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Seq</span><span class="o">::</span><span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="c1">//把输入数据读入到队列SeqList中</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Len</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span><span class="c1">//设置队列的实际长度</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//队列位置从1开始</span>
</span><span class='line'>      <span class="n">SeqList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">Seq</span><span class="o">::</span><span class="n">BinSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//折半查找，队列位置从1开始</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">high</span><span class="p">;</span>
</span><span class='line'>  <span class="n">low</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">high</span> <span class="o">=</span> <span class="n">Len</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span><span class="c1">//取mid为low和high的中间值</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="c1">//比较队列SeqList中第mid位置的数值和key,如果相等返回位置mid</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="c1">//如果key小于队列中的数值，设置high等于mid-1，在前半区间查找</span>
</span><span class='line'>          <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="c1">//否则设置low等于mid+1,在后半区间查找</span>
</span><span class='line'>          <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Seq</span> <span class="n">mySeq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入数据队列长度</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//输入队列数据，作顺序表</span>
</span><span class='line'>  <span class="n">mySeq</span><span class="p">.</span><span class="n">SetSeq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cin</span> <span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">//输入要查找的记录数量</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">key</span><span class="p">;</span><span class="c1">//输入要查找的数据key</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="n">mySeq</span><span class="p">.</span><span class="n">BinSearch</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="c1">//使用折半查找</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="n">error</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">n</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出找到的位置</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//--------------------顺序索引查找---------------------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//------------------队列定义和设置函数--------------------</span>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Seq</span> <span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//主表，存储数据的队列，位置从1开始</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">indexMax</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//索引表中每个块的最大值</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">indexPos</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//索引表中每个块的开始位置</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Len</span><span class="p">;</span><span class="c1">//队列实际长度</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Bnum</span><span class="p">;</span><span class="c1">//队列分成多少个块</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">imax</span><span class="p">[]);</span><span class="c1">//读取输入的数据，设置队列和索引表</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">IndexSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span>   <span class="c1">//顺序索引查找，如果队列中有记录key,返回记录位置，如果没有-1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">STimes</span><span class="p">;</span><span class="c1">//比较次数</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Seq</span><span class="o">::</span><span class="n">SetSeq</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">list</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">imax</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="c1">//n是主表长度 b是块的数量 list是主表数据 imax是索引表的最大值数组</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Len</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span><span class="c1">//设置队列的实际长度</span>
</span><span class='line'>  <span class="n">Bnum</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span><span class="c1">//设置队列分成多少个块</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//设置主表数据</span>
</span><span class='line'>      <span class="n">SeqList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//设置索引表中的最大值和块开始位置</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">b</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="c1">//最大值是根据imax数组设置</span>
</span><span class='line'>      <span class="n">indexMax</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">imax</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="c1">//块开始位置是计算得到的</span>
</span><span class='line'>      <span class="n">indexPos</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="p">((</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>      <span class="c1">//除了最后一个块 其他块的长度都是固定的 所以每个块的开始位置等于前一块的开始位置加上块长度</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-----------------顺序索引查找函数---------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">Seq</span><span class="o">::</span><span class="n">IndexSearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//索引表和块都采用顺序查找，假定每个块的数据不小于前一块的最大值</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">STimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//比较次数初始化为0</span>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="c1">//索引表内的顺序查找，找出的块号保存在i中</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">Bnum</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">STimes</span><span class="o">++</span><span class="p">;</span><span class="c1">//注意每次索引表比较，都要增加1次比较次数STimes</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">key</span><span class="o">&lt;=</span><span class="n">indexMax</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">Bnum</span><span class="p">)</span> <span class="k">return</span> <span class="n">error</span><span class="p">;</span><span class="c1">//输入的数值比索引表的值都大，查找失败</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">k</span><span class="o">=</span><span class="n">indexPos</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//找出块的开始位置</span>
</span><span class='line'><span class="c1">//块内的顺序查找，如果查找成功直接返回位置</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="n">t</span><span class="o">=</span><span class="n">k</span><span class="p">;</span> <span class="n">t</span><span class="o">&lt;</span><span class="n">k</span><span class="o">+</span><span class="p">(</span><span class="n">Len</span><span class="o">/</span><span class="n">Bnum</span><span class="p">);</span> <span class="o">++</span><span class="n">t</span><span class="p">)</span><span class="c1">//注意每次块内比较，都要增加1次比较次数STimes</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="o">++</span><span class="n">STimes</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span> <span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">&gt;</span><span class="n">Len</span> <span class="o">||</span> <span class="n">SeqList</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">!=</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">],</span><span class="n">imax</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Seq</span> <span class="n">mySeq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入数据队列长度，n个</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//输入队列数据，作顺序表</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span><span class="c1">//输入数据队列长度，b个</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">b</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">imax</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//输入队列数据，作顺序表</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mySeq</span><span class="p">.</span><span class="n">SetSeq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">list</span><span class="p">,</span><span class="n">imax</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span> <span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">//输入要查找的记录数量</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">key</span><span class="p">;</span><span class="c1">//输入要查找的数据key</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="n">mySeq</span><span class="p">.</span><span class="n">IndexSearch</span><span class="p">(</span><span class="n">key</span><span class="p">);</span><span class="c1">//使用顺序索引查找</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="n">error</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">n</span><span class="o">&lt;&lt;</span><span class="sc">&#39;-&#39;</span><span class="o">&lt;&lt;</span><span class="n">mySeq</span><span class="p">.</span><span class="n">STimes</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出位置和查找次数</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>哈希查找</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//实现哈希查找，哈希函数为求余，哈希冲突用链地址法和表头插入</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 999</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="cp">#define MaxLen 100</span>
</span><span class='line'><span class="cp">#define Prime 11</span><span class="c1">//求余法的质数</span>
</span><span class='line'><span class="cp">#define HashLen 11</span><span class="c1">//哈希表头的长度</span>
</span><span class='line'><span class="c1">//---------------树结点和树定义--------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HashNode</span><span class="c1">//哈希表中的链表结点</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">HashNode</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HashList</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">HashNode</span> <span class="n">Table</span><span class="p">[</span><span class="n">HashLen</span><span class="p">];</span><span class="c1">//存储数据的哈希表，表头的data存放链表长度</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//读取输入的数据，设置队列</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">HashList</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Stimes</span><span class="p">;</span><span class="c1">//查找次数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Search</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span><span class="c1">//查找成功返回哈希地址，查找失败则表头插入，并返回error</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">HashList</span><span class="o">::</span><span class="n">HashList</span><span class="p">()</span><span class="c1">//初始化</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">HashLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Table</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//每个链表头元素的data数值都初始化为0，表示第i个链表长度初始化为0</span>
</span><span class='line'>      <span class="n">Table</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="c1">//每个链表头元素的next数值都初始化为NULL，表示第i个链表初始化为空</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------插入与查找----------------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HashList</span><span class="o">::</span><span class="n">Insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//插入函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">HashNode</span> <span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashNode</span><span class="p">();</span><span class="c1">//创建一个新链表结点</span>
</span><span class='line'>  <span class="n">HashNode</span> <span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashNode</span><span class="p">();</span>
</span><span class='line'><span class="c1">//做表头插入</span>
</span><span class='line'>  <span class="n">q</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">Table</span><span class="p">[</span><span class="n">addr</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Table</span><span class="p">[</span><span class="n">addr</span><span class="p">].</span><span class="n">next</span><span class="o">=</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Table</span><span class="p">[</span><span class="n">addr</span><span class="p">].</span><span class="n">data</span><span class="o">++</span><span class="p">;</span><span class="c1">//链表头元素的data+1，表示链表长度+1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">HashList</span><span class="o">::</span><span class="n">Search</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span><span class="c1">//哈希查找</span>
</span><span class='line'><span class="p">{</span><span class="c1">//查找成功返回哈希地址，查找失败则表头插入，并返回error</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">HashNode</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Stimes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="n">Prime</span><span class="p">;</span><span class="c1">//求余法作为哈希函数，求得哈希地址addr</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">Table</span><span class="p">[</span><span class="n">addr</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="c1">//根据哈希地址，进行链表查找</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Table</span><span class="p">[</span><span class="n">addr</span><span class="p">].</span><span class="n">data</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span><span class="c1">//链表为空</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Insert</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span><span class="n">key</span><span class="p">);</span><span class="c1">//调用Insert函数做插入，然后返回error</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//链表不空，则沿着链表查找，每次查找记得次数+1</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Stimes</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">addr</span><span class="p">;</span><span class="c1">//查找成功返回哈希地址addr</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>          <span class="n">Insert</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span><span class="n">key</span><span class="p">);</span><span class="c1">//查找不成功则调用Insert函数做插入然后返回error</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addr</span><span class="p">;</span><span class="c1">//查找成功返回哈希地址</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">HashList</span> <span class="n">myHash</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//输入n表示要输入n个数据</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输入n个数据，放在list数组中</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">myHash</span><span class="p">.</span><span class="n">Search</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="c1">//对list数组的每个元素进行查找，实际就是通过查找不成功执行插入，从而建立哈希表</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span><span class="c1">//要查找的t个数据</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">key</span><span class="p">;</span><span class="c1">//逐个输入要查找的数据</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">myHash</span><span class="p">.</span><span class="n">Search</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="n">error</span><span class="p">)</span><span class="c1">//查找失败输出error</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span><span class="c1">//若成功则输出哈希地址+空+查找次数</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">myHash</span><span class="p">.</span><span class="n">Search</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">&lt;&lt;</span><span class="n">myHash</span><span class="p">.</span><span class="n">Stimes</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--二叉树的遍历]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/erchashu/"/>
    <updated>2014-03-18T13:07:24+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/erchashu</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//-------二叉树结点定义----------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BiTreeNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">leftChild</span><span class="p">;</span><span class="c1">//左指数指针</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">rightChild</span><span class="p">;</span><span class="c1">//右指数指针</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">;</span><span class="c1">//数据域</span>
</span><span class='line'>  <span class="c1">//构造函数和析构函数</span>
</span><span class='line'>  <span class="n">BiTreeNode</span><span class="p">()</span><span class="o">:</span><span class="n">leftChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">rightChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
</span><span class='line'>  <span class="n">BiTreeNode</span><span class="p">(</span><span class="kt">char</span> <span class="n">item</span><span class="p">,</span> <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>              <span class="n">data</span><span class="p">(</span><span class="n">item</span><span class="p">),</span><span class="n">leftChild</span><span class="p">(</span><span class="n">left</span><span class="p">),</span><span class="n">rightChild</span><span class="p">(</span><span class="n">right</span><span class="p">){}</span>
</span><span class='line'>              <span class="o">~</span><span class="n">BiTreeNode</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">Left</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//注意返回值类型为指针的引用类型</span>
</span><span class='line'>              <span class="p">{</span><span class="k">return</span> <span class="n">leftChild</span><span class="p">;}</span>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">Right</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//注意返回值类型为指针的引用类型</span>
</span><span class='line'>              <span class="p">{</span><span class="k">return</span> <span class="n">rightChild</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//-------------二叉树类定义-------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BiTree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span><span class="c1">//根结点指针</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PreOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">InOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PostOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">//构造函数和析构函数</span>
</span><span class='line'>  <span class="n">BiTree</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="o">:</span><span class="n">root</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">){};</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">BiTree</span><span class="p">(</span><span class="kt">void</span><span class="p">){};</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">MakeTree</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[]);</span><span class="c1">//构造二叉树，利用先序遍历结果建树</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PreOrder</span><span class="p">();</span><span class="c1">//前序遍历</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">InOrder</span><span class="p">();</span><span class="c1">//中序遍历</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PostOrder</span><span class="p">();</span><span class="c1">//后序遍历</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//-----------销毁和创建函数------------</span>
</span><span class='line'><span class="c1">//销毁二叉树</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="c1">//销毁二叉树，公有函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Destroy</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//构造二叉树，利用先序遍历结果建树</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">MakeTree</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">strTree</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">CreateBiTree</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[])</span><span class="c1">//递归建树</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ch</span><span class="o">=</span><span class="n">strTree</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="n">T</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">T</span><span class="o">=</span><span class="k">new</span> <span class="n">BiTreeNode</span><span class="p">();</span>
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span><span class="c1">//生成根结点</span>
</span><span class='line'>      <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">()</span> <span class="p">,</span> <span class="n">strTree</span><span class="p">);</span><span class="c1">//构造左子树</span>
</span><span class='line'>      <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">(),</span>  <span class="n">strTree</span><span class="p">);</span><span class="c1">//构造右子树</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----------------先序遍历------------------</span>
</span><span class='line'><span class="c1">//定义先序遍历函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">PreOrder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PreOrder</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="n">BiTree</span><span class="o">::</span><span class="n">PreOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//若二叉树不为空</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span><span class="c1">//输出当前结点的数据，表示该结点被访问了</span>
</span><span class='line'>      <span class="n">PreOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span><span class="c1">//先序遍历该结点的左孩子</span>
</span><span class='line'>      <span class="n">PreOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span><span class="c1">//先序遍历该结点的右孩子</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------中序遍历--------------</span>
</span><span class='line'><span class="c1">//定义中序遍历函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">InOrder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">InOrder</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="n">BiTree</span><span class="o">::</span><span class="n">InOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//若二叉树不为空</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">InOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span><span class="c1">//中序遍历该结点的左孩子</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span><span class="c1">//输出当前结点的数据，表示该结点被访问了</span>
</span><span class='line'>      <span class="n">InOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span><span class="c1">//中序遍历该结点的右孩子</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------后序遍历--------------</span>
</span><span class='line'><span class="c1">//定义后序遍历函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">PostOrder</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PostOrder</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="n">BiTree</span><span class="o">::</span><span class="n">PostOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//若二叉树不为空</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">PostOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span><span class="c1">//后序遍历该结点的左孩子</span>
</span><span class='line'>      <span class="n">PostOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span><span class="c1">//后序遍历该结点的右孩子</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span><span class="c1">//输出当前结点的数据，表示该结点被访问了</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//---------------主程序-----------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">strTree</span><span class="p">[</span><span class="mi">800</span><span class="p">];</span>
</span><span class='line'>  <span class="n">BiTree</span> <span class="n">myTree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">strTree</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">MakeTree</span><span class="p">(</span><span class="n">strTree</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">PreOrder</span><span class="p">();</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">InOrder</span><span class="p">();</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">PostOrder</span><span class="p">();</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------------------输出叶结点的数量-----------------------------</span>
</span><span class='line'><span class="kt">void</span>  <span class="n">BiTree</span><span class="o">::</span><span class="n">PreOrder</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">PreOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span>
</span><span class='line'>      <span class="n">PreOrder</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">strTree</span><span class="p">[</span><span class="mi">800</span><span class="p">];</span>
</span><span class='line'>  <span class="n">BiTree</span> <span class="n">myTree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">strTree</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">MakeTree</span><span class="p">(</span><span class="n">strTree</span><span class="p">);</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">PreOrder</span><span class="p">();</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">j</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>      <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">-</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------二叉树的最大结点----------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//---------------二叉树结点定义-----------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BiTreeNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">leftChild</span><span class="p">;</span><span class="c1">//左子树指针</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">rightChild</span><span class="p">;</span><span class="c1">//右子树指针</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">;</span><span class="c1">//数据域</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">weight</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//构造函数和析构函数</span>
</span><span class='line'>  <span class="n">BiTreeNode</span><span class="p">()</span><span class="o">:</span><span class="n">leftChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">rightChild</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
</span><span class='line'>  <span class="n">BiTreeNode</span><span class="p">(</span><span class="kt">char</span> <span class="n">item</span><span class="p">,</span> <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>              <span class="n">data</span><span class="p">(</span><span class="n">item</span><span class="p">),</span><span class="n">leftChild</span><span class="p">(</span><span class="n">left</span><span class="p">),</span><span class="n">rightChild</span><span class="p">(</span><span class="n">right</span><span class="p">){}</span>
</span><span class='line'>              <span class="o">~</span><span class="n">BiTreeNode</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">Left</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//注意返回值类型为指针的引用类型</span>
</span><span class='line'>              <span class="p">{</span><span class="k">return</span> <span class="n">leftChild</span><span class="p">;}</span>
</span><span class='line'>              <span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">Right</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//注意返回值类型为指针的引用类型</span>
</span><span class='line'>              <span class="p">{</span><span class="k">return</span> <span class="n">rightChild</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//---------------二叉树定义-----------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BiTree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BiTreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span><span class="c1">//根结点指针</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">maxWeight</span><span class="p">;</span><span class="c1">//最大权值</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">maxData</span><span class="p">;</span><span class="c1">//最大结点编号</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PreSetWeight</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">,</span><span class="k">const</span> <span class="kt">int</span> <span class="n">wTree</span><span class="p">[]);;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">FindMaxW</span><span class="p">(</span><span class="n">BiTreeNode</span>  <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span><span class="c1">//找出最大权值</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">//构造函数和析构函数</span>
</span><span class='line'>  <span class="n">BiTree</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="o">:</span><span class="n">root</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">i</span><span class="p">(</span><span class="mi">0</span><span class="p">){};</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">BiTree</span><span class="p">(</span><span class="kt">void</span><span class="p">){};</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">MakeTree</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[]);</span><span class="c1">//构造二叉树，利用先序遍历结果建树</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">PreSetWeight</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">wTree</span><span class="p">[]);</span><span class="c1">//前序遍历设置每个结点的权重</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">FindMaxW</span><span class="p">();</span><span class="c1">//找出最大权值</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Destroy</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">Destroy</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Destroy</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------二叉树创建函数和权值设置函数-----------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">MakeTree</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[])</span>
</span><span class='line'><span class="c1">//构造二叉树，利用先序遍历结果建树，公有函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">strTree</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">CreateBiTree</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="n">strTree</span><span class="p">[])</span><span class="c1">//递归建树私有函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ch</span><span class="o">=</span><span class="n">strTree</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ch</span><span class="o">==</span><span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="n">T</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">T</span><span class="o">=</span><span class="k">new</span> <span class="n">BiTreeNode</span><span class="p">();</span>
</span><span class='line'>      <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span><span class="c1">//生成根结点</span>
</span><span class='line'>      <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">()</span> <span class="p">,</span> <span class="n">strTree</span><span class="p">);</span><span class="c1">//构造左子树</span>
</span><span class='line'>      <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">(),</span>  <span class="n">strTree</span><span class="p">);</span><span class="c1">//构造右子树</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//先序遍历设置权值</span>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">PreSetWeight</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">wTree</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//初始化i为0</span>
</span><span class='line'>  <span class="n">PreSetWeight</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">wTree</span><span class="p">);</span><span class="c1">//调用PreSetWeight私有函数，传递参数是root和wTree</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>  <span class="n">BiTree</span><span class="o">::</span><span class="n">PreSetWeight</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">wTree</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//如果t不为空</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">t</span><span class="o">-&gt;</span><span class="n">weight</span><span class="o">=</span><span class="n">wTree</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//设置当前结点权值等于数组i位置的值，是哪个数组</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">PreSetWeight</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">(),</span><span class="n">wTree</span><span class="p">);</span><span class="c1">//递归调用本函数遍历左孩子</span>
</span><span class='line'>          <span class="n">PreSetWeight</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">(),</span><span class="n">wTree</span><span class="p">);</span><span class="c1">//递归调用本函数遍历右孩子</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//---------------查找最大权值的函数-------------</span>
</span><span class='line'><span class="c1">//先序遍历寻找最大结点</span>
</span><span class='line'><span class="kt">char</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">FindMaxW</span><span class="p">()</span>
</span><span class='line'><span class="c1">//前序遍历访问二叉树，公有函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">maxWeight</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//初始化为0</span>
</span><span class='line'>  <span class="n">FindMaxW</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="c1">//调用FindMaxW私有函数</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxData</span><span class="p">;</span><span class="c1">//返回最大权值对应结点编号</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BiTree</span><span class="o">::</span><span class="n">FindMaxW</span><span class="p">(</span><span class="n">BiTreeNode</span> <span class="o">*</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span><span class="c1">//如果t不为空</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">weight</span> <span class="o">&gt;</span> <span class="n">maxWeight</span><span class="p">)</span><span class="c1">//当前结点权值大于已知最大权值maxWeight</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">maxWeight</span><span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">weight</span><span class="p">;</span><span class="c1">//把当前权值替换掉maxWeight</span>
</span><span class='line'>          <span class="n">maxData</span><span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span><span class="c1">//把当前结点编号替换掉maxData</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">FindMaxW</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Left</span><span class="p">());</span><span class="c1">//递归调用本函数遍历左孩子</span>
</span><span class='line'>      <span class="n">FindMaxW</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">Right</span><span class="p">());</span><span class="c1">//递归调用本函数遍历右孩子</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-----------------主函数-----------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">strTree</span><span class="p">[</span><span class="mi">800</span><span class="p">],</span><span class="n">no</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">wTree</span><span class="p">[</span><span class="mi">800</span><span class="p">];</span>
</span><span class='line'>  <span class="n">BiTree</span> <span class="n">myTree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">strTree</span><span class="p">;</span><span class="c1">//读入字符串</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">MakeTree</span><span class="p">(</span><span class="n">strTree</span><span class="p">);</span><span class="c1">//创建二叉树</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span><span class="c1">//读入权值数量</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">wTree</span><span class="p">[</span><span class="n">j</span><span class="p">];</span><span class="c1">//把结点权值放入数组wTree</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">PreSetWeight</span><span class="p">(</span><span class="n">wTree</span><span class="p">);</span><span class="c1">//调用函数把权值设置到每个结点中</span>
</span><span class='line'>      <span class="n">no</span><span class="o">=</span><span class="n">myTree</span><span class="p">.</span><span class="n">FindMaxW</span><span class="p">();</span><span class="c1">//调用函数，函数返回值放入变量no中，表示得到最大权值的结点编号</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">no</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输入最大权值结点编号并换行</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTree</span><span class="p">.</span><span class="n">Destroy</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--串应用 KMP算法]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/kmp/"/>
    <updated>2014-03-18T13:06:02+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/kmp</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//括号匹配</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span><span class="c1">//使用c++自带的STL栈</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="c1">//-------串类定义-----------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">myString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">mainstr</span><span class="p">;</span><span class="c1">//串</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span><span class="c1">//串长度</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">GetNext</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">next</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">KMPFind</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">next</span><span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">myString</span><span class="p">();</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">myString</span><span class="p">();</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetVal</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">sp</span><span class="p">);</span><span class="c1">//设定主串字符内容和长度</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">KMPFindSubstr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">myString</span><span class="o">::</span><span class="n">myString</span><span class="p">()</span><span class="c1">//构造函数，定义对象并赋初始串值</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mainstr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">myString</span><span class="o">::~</span><span class="n">myString</span><span class="p">()</span><span class="c1">//析构函数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mainstr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----------赋值与next函数-----------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">myString</span><span class="o">::</span><span class="n">SetVal</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mainstr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mainstr</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">sp</span><span class="p">);</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">mainstr</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">myString</span><span class="o">::</span><span class="n">GetNext</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">next</span><span class="p">[])</span>
</span><span class='line'><span class="c1">//求模式串t的next[j]函数值存于数组next中</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">next</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">k</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//---------KMP内部函数--------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">myString</span><span class="o">::</span><span class="n">KMPFind</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">next</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pos</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">L</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>  <span class="k">while</span>  <span class="p">((</span><span class="n">i</span> <span class="o">&lt;</span><span class="n">size</span><span class="p">)</span>  <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span><span class="o">&lt;</span><span class="n">L</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">j</span><span class="o">==-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">mainstr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">())</span>
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-----------KMP外部函数-------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">myString</span><span class="o">::</span><span class="n">KMPFindSubstr</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
</span><span class='line'><span class="c1">//主串从pos开始查找子串p.找到返回p在主串的开始位置否则返回-1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">L</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">L</span><span class="p">];</span>
</span><span class='line'>  <span class="n">GetNext</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">L</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">next</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v</span><span class="o">=</span> <span class="n">KMPFind</span> <span class="p">(</span> <span class="n">p</span><span class="p">,</span><span class="n">pos</span><span class="p">,</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-------------主函数-----------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">pos</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">p1</span><span class="p">;</span><span class="c1">//s是主串，p是模式串</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">t</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">p1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myString</span> <span class="n">ms</span><span class="p">;</span><span class="c1">//创建字符串对象</span>
</span><span class='line'>      <span class="n">ms</span><span class="p">.</span><span class="n">SetVal</span><span class="p">(</span><span class="n">s1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pos</span> <span class="o">=</span> <span class="n">ms</span><span class="p">.</span><span class="n">KMPFindSubstr</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">pos</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--堆栈应用]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/9/"/>
    <updated>2014-03-18T01:12:10+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/9</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">;</span><span class="c1">//创建一个存放字符数据的堆栈对象</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">str</span><span class="p">;</span><span class="c1">//接受输入的字符串</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span><span class="c1">//把字符串的每个字符压入堆栈</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span><span class="c1">//判断堆栈非空</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">();</span><span class="c1">//获取栈顶元素，并输出</span>
</span><span class='line'>          <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="c1">//把栈顶元素弹出</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//括号匹配</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span><span class="c1">//使用c++自带的STL栈</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//-------全局变量和函数声明--------</span>
</span><span class='line'><span class="cp">#define OK 0</span>
</span><span class='line'><span class="cp">#define ERROR -1</span>
</span><span class='line'><span class="cp">#define OVERFLOW -1</span>
</span><span class='line'><span class="cp">#define OPSETSIZE 7</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">Status</span><span class="p">;</span>  <span class="c1">//运算符号集合长度，目前只有7个符号</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">Prior</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="c1">//算符间的优先关系</span>
</span><span class='line'>  <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;=&#39;</span><span class="p">,</span><span class="sc">&#39; &#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39; &#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">,</span><span class="sc">&#39; &#39;</span><span class="p">,</span><span class="sc">&#39;=&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">float</span> <span class="n">Operate</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">theta</span><span class="p">,</span><span class="kt">float</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">OPSET</span><span class="p">[</span><span class="n">OPSETSIZE</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;+&#39;</span><span class="p">,</span><span class="sc">&#39;-&#39;</span><span class="p">,</span><span class="sc">&#39;*&#39;</span><span class="p">,</span><span class="sc">&#39;/&#39;</span><span class="p">,</span><span class="sc">&#39;(&#39;</span><span class="p">,</span><span class="sc">&#39;)&#39;</span><span class="p">,</span><span class="sc">&#39;#&#39;</span><span class="p">,};</span><span class="c1">//运算符集合</span>
</span><span class='line'><span class="n">Status</span> <span class="n">In</span><span class="p">(</span><span class="kt">char</span> <span class="n">Test</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">TestOp</span><span class="p">);</span><span class="c1">//判断字符Test是否是运算符</span>
</span><span class='line'><span class="kt">char</span> <span class="n">precede</span><span class="p">(</span><span class="kt">char</span> <span class="n">Aop</span><span class="p">,</span> <span class="kt">char</span> <span class="n">Bop</span><span class="p">);</span>
</span><span class='line'><span class="c1">//-------辅助函数的定义----------</span>
</span><span class='line'><span class="kt">float</span> <span class="n">Operate</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">theta</span><span class="p">,</span><span class="kt">float</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span><span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span><span class="k">return</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;/&#39;</span><span class="o">:</span><span class="k">return</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span> <span class="o">:</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Status</span> <span class="n">In</span><span class="p">(</span><span class="kt">char</span> <span class="n">Test</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">TestOp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">Find</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">OPSETSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">Test</span> <span class="o">==</span> <span class="n">TestOp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span> <span class="n">Find</span><span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Find</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ReturnOpOrd</span><span class="p">(</span><span class="kt">char</span> <span class="n">op</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span> <span class="n">TestOp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">OPSETSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="n">TestOp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">precede</span><span class="p">(</span><span class="kt">char</span> <span class="n">Aop</span><span class="p">,</span> <span class="kt">char</span> <span class="n">Bop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Prior</span><span class="p">[</span><span class="n">ReturnOpOrd</span><span class="p">(</span><span class="n">Aop</span><span class="p">,</span><span class="n">OPSET</span><span class="p">)][</span><span class="n">ReturnOpOrd</span><span class="p">(</span><span class="n">Bop</span><span class="p">,</span><span class="n">OPSET</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-------------求值函数-----------------</span>
</span><span class='line'><span class="kt">float</span> <span class="n">EvalvateExpression</span><span class="p">(</span><span class="n">string</span> <span class="n">MyExp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//算术表达式求值的算符优先算法</span>
</span><span class='line'><span class="c1">//设OPTR和OPND分别为运算符栈和运算数栈，OP为运算符集合</span>
</span><span class='line'>  <span class="n">stack</span> <span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">OPTR</span><span class="p">;</span><span class="c1">//运算符栈，字符元素</span>
</span><span class='line'>  <span class="n">stack</span> <span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">OPND</span><span class="p">;</span><span class="c1">//运算数栈，实数元素</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">TempData</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">Data</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">theta</span><span class="p">,</span><span class="n">Dr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">OPTR</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="sc">&#39;#&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">MyExp</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="c1">//c指向表达式字符串首地址</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">TempData</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="o">!=</span> <span class="sc">&#39;#&#39;</span> <span class="o">||</span> <span class="n">OPTR</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">&#39;#&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">In</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="n">OPSET</span><span class="p">)){</span><span class="c1">//读入的字符不是运算符，是1个数字</span>
</span><span class='line'>          <span class="n">Dr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=*</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>          <span class="n">Dr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">strcat</span><span class="p">(</span><span class="n">TempData</span><span class="p">,</span><span class="n">Dr</span><span class="p">);</span>
</span><span class='line'>          <span class="n">c</span><span class="o">++</span><span class="p">;</span><span class="c1">//读入1个字符</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">In</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">,</span><span class="n">OPSET</span><span class="p">)){</span><span class="c1">//是运算符，表明读入了一个完整的操作数数</span>
</span><span class='line'>              <span class="n">Data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">atof</span><span class="p">(</span><span class="n">TempData</span><span class="p">);</span>
</span><span class='line'>              <span class="n">OPND</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Data</span><span class="p">);</span><span class="c1">//将操作数压入堆栈</span>
</span><span class='line'>              <span class="n">strcpy</span><span class="p">(</span><span class="n">TempData</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span><span class="c1">//是运算符，开始进行计算</span>
</span><span class='line'>          <span class="k">switch</span> <span class="p">(</span><span class="n">precede</span><span class="p">(</span><span class="n">OPTR</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span><span class="o">*</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>   
</span><span class='line'>          <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span><span class="c1">//栈顶元素优先权低</span>
</span><span class='line'>              <span class="n">OPTR</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>              <span class="n">c</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="k">case</span> <span class="sc">&#39;=&#39;</span><span class="o">:</span><span class="c1">//脱括号并接收下一字符</span>
</span><span class='line'>              <span class="n">OPTR</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>              <span class="n">c</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span><span class="c1">//退栈并将运算结果入栈</span>
</span><span class='line'>              <span class="n">theta</span> <span class="o">=</span> <span class="n">OPTR</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>              <span class="n">OPTR</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>              <span class="n">b</span> <span class="o">=</span> <span class="n">OPND</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>              <span class="n">OPND</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>              <span class="n">a</span> <span class="o">=</span> <span class="n">OPND</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>              <span class="n">OPND</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">OPND</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Operate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">theta</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span><span class="c1">//switch</span>
</span><span class='line'>      <span class="p">}</span><span class="c1">//else</span>
</span><span class='line'>  <span class="p">}</span><span class="c1">//while</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">OPND</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="c1">//EvaluateExpress</span>
</span><span class='line'><span class="c1">//-----------主函数------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">Exp</span><span class="p">;</span><span class="c1">//输入表达式字符串，以#结尾</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">Exp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">EvalvateExpression</span><span class="p">(</span><span class="n">Exp</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">fixed</span><span class="o">&lt;&lt;</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">result</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出带4位小数的浮点数结果</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Strkcture--单链表 ]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/18/8/"/>
    <updated>2014-03-18T01:03:51+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/18/8</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="c1">//链表结点类定义</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ListNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span> <span class="n">ptrNext</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">ptrNext</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">ptrNext</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">ptrNext</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">ListNode</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//-------带头结点的单链表类定义-----------</span>
</span><span class='line'><span class="c1">//单链表的头结点的数据域存储链表长度，即不含头结点的其他元素结点</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LinkList</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">index</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//返回第i个结点的指针，如果不存在返回NULL</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">LinkList</span><span class="p">();</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">LinkList</span><span class="p">();</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_len</span><span class="p">();</span><span class="c1">//获取单链表含数据元素的个数，不包含头结点</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//获取第i个元素的数据</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//把数值item插入第i个位置</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//删除第i个元素</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//-----单链表的创建与回收------</span>
</span><span class='line'><span class="n">LinkList</span><span class="o">::</span><span class="n">LinkList</span><span class="p">()</span><span class="c1">//链表回收，要逐个结点回收</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">();</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">LinkList</span><span class="o">::~</span><span class="n">LinkList</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">=</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">q</span><span class="o">=</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">len</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----单链表的定位，长度，查找----</span>
</span><span class='line'><span class="n">ListNode</span> <span class="o">*</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">index</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span><span class="c1">//定位函数，返回第i个结点的指针</span>
</span><span class='line'><span class="c1">//元素结点位置从11开始，头结点位置为0，定位失败会返回NULL</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span><span class="c1">//定位越界</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">head</span><span class="p">;</span><span class="c1">//i为0则返回头指针</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_len</span><span class="p">()</span><span class="c1">//获取单链表的长度</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//获取第i个节点的数据</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span><span class="c1">//位置越界</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="c1">//定位到第i个结点</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----单链表的插入和删除---</span>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//在第i个位置插入新数据</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">){</span><span class="c1">//位置len+1表示插入表尾，位置1表示插入表头</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="c1">//定位到第i-1个结点</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span><span class="c1">//创建新的结点，获取指定数据，将前一结点的next指针改为自己的next指针</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span><span class="c1">//第i-1结点指向新插入结点</span>
</span><span class='line'>  <span class="n">len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="c1">//删除第i个结点</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="c1">//空链表，无法删除</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="c1">//定位到第i-1个结点</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span><span class="c1">//s定位到要删除的结点</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span><span class="c1">//第i-1号结点的next指针指向第i+1号结点</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span><span class="c1">//获取要删除结点包含的数据</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">s</span><span class="p">;</span><span class="c1">//删除指定结点</span>
</span><span class='line'>  <span class="n">len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">temp</span><span class="p">;</span><span class="c1">//返回删除结点的数据</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-------主函数-----------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">LinkList</span> <span class="n">sl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//创建单链表</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sl</span><span class="p">.</span><span class="n">LL_insert</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输出单链表的结果</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//单链表的插入</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">temp</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span><span class="c1">//输入插入的数据和位置</span>
</span><span class='line'>  <span class="n">sl</span><span class="p">.</span><span class="n">LL_insert</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输出单链表的结果</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//单链表的删除</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>   <span class="c1">//输入删除的位置</span>
</span><span class='line'>  <span class="n">sl</span><span class="p">.</span><span class="n">LL_del</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span><span class="c1">//输出单链表的结果</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//单链表的查找</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>   <span class="c1">//输入获取的位置</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">k</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ListNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="p">(</span><span class="n">ListNode</span> <span class="o">*</span> <span class="n">ptrNext</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">ptrNext</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span> <span class="n">ListNode</span> <span class="o">*</span><span class="n">ptrNext</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">ptrNext</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">ListNode</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LinkList</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span> <span class="n">index</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">LinkList</span><span class="p">();</span>
</span><span class='line'>  <span class="o">~</span><span class="n">LinkList</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_len</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">LL_change</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">LinkList</span><span class="o">::</span><span class="n">LinkList</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">();</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">LinkList</span><span class="o">::~</span><span class="n">LinkList</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">=</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">q</span><span class="o">=</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">len</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ListNode</span> <span class="o">*</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">index</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_len</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">len</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">LinkList</span><span class="o">::</span><span class="n">LL_change</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">q1</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ListNode</span> <span class="o">*</span><span class="n">q2</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">q1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">q2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">temp</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">LinkList</span> <span class="n">sl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sl</span><span class="p">.</span><span class="n">LL_insert</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sl</span><span class="p">.</span><span class="n">LL_change</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">n</span><span class="o">&gt;</span><span class="n">sl</span><span class="p">.</span><span class="n">LL_len</span><span class="p">()){</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">sl</span><span class="p">.</span><span class="n">LL_change</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--顺序表]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/17/7/"/>
    <updated>2014-03-17T22:55:09+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/17/7</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ok 0</span>
</span><span class='line'><span class="cp">#define error -1</span>
</span><span class='line'><span class="c1">//---------顺序表类定义--------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SeqList</span><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span><span class="c1">//元素数组</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">maxsize</span><span class="p">;</span><span class="c1">//顺序表最大长度</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span> <span class="c1">//顺序表实际长度</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">SeqList</span><span class="p">(</span><span class="kt">int</span> <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="c1">//构造函数</span>
</span><span class='line'>  <span class="o">~</span><span class="n">SeqList</span><span class="p">();</span>        <span class="c1">//析构函数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list_size</span><span class="p">();</span><span class="c1">//获取顺序表实际长度</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//插入一个元素，参数是插入的数值和位置</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//删除一个元素，参数是删除的位置</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">list_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span><span class="c1">//获取一个元素，参数是获取的位置</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//-------顺序表的创建，回收和获取实际长度-------</span>
</span><span class='line'><span class="n">SeqList</span><span class="o">::</span><span class="n">SeqList</span><span class="p">(</span><span class="kt">int</span> <span class="n">max</span><span class="p">){</span><span class="c1">//构造函数，对象初始化设定</span>
</span><span class='line'>  <span class="n">maxsize</span> <span class="o">=</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">maxsize</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SeqList</span><span class="o">::~</span><span class="n">SeqList</span><span class="p">(){</span><span class="c1">//析构函数</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">list</span><span class="p">;</span><span class="c1">//回收空间</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">SeqList</span><span class="o">::</span><span class="n">list_size</span><span class="p">(){</span><span class="c1">//获取顺序表实际长度</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-------顺序表的插入操作-----------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">SeqList</span><span class="o">::</span><span class="n">list_insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">item</span><span class="p">,</span><span class="kt">int</span> <span class="n">i</span><span class="p">){</span><span class="c1">//在指定位置插入一个元素item</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">maxsize</span><span class="p">){</span><span class="c1">//检查顺序表是否已满</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">){</span>   <span class="c1">//检查是否位置越界</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">p</span><span class="o">&gt;=</span><span class="n">q</span><span class="p">;</span> <span class="o">--</span><span class="n">p</span><span class="p">)</span>  <span class="c1">//位置i及后面的元素全部后移一位</span>
</span><span class='line'>      <span class="n">list</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'>  <span class="n">list</span><span class="p">[</span><span class="n">q</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">size</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------顺序表的删除和获取操作-------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">SeqList</span><span class="o">::</span><span class="n">list_del</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">){</span><span class="c1">//在指定位置删除一个元素，返回删除的元素值</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span><span class="c1">//检查顺序表是否已空</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">size</span><span class="p">){</span><span class="c1">//检查是否位置越界</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="o">++</span><span class="n">p</span><span class="p">;</span><span class="n">p</span><span class="o">&lt;=</span><span class="n">q</span><span class="p">;</span><span class="o">++</span><span class="n">p</span><span class="p">)</span><span class="c1">//位置i后面的元素全部前移一位，覆盖掉位置i</span>
</span><span class='line'>      <span class="n">list</span><span class="p">[</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'>  <span class="n">size</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">SeqList</span><span class="o">::</span><span class="n">list_get</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">){</span><span class="c1">//获取指定位置i的元素值</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1</span> <span class="o">||</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">size</span><span class="p">){</span><span class="c1">//检查是否位置越界</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-----主程序1------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SeqList</span> <span class="n">mylist</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span><span class="c1">//创建一个顺序表，最大长度100</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">,</span><span class="n">item</span><span class="p">,</span><span class="n">inspos</span><span class="p">,</span><span class="n">delpos</span><span class="p">,</span><span class="n">getpos</span><span class="p">;</span><span class="c1">//一系列参数定义</span>
</span><span class='line'><span class="c1">//创建顺序表</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">len</span><span class="p">;</span><span class="c1">//输入顺序表长度</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span><span class="c1">//输入一行顺序表初始数据</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mylist</span><span class="p">.</span><span class="n">list_insert</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">i</span><span class="p">);</span><span class="c1">//创建顺序表</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输出创建后的结果</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//插入新的数据</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">item</span><span class="o">&gt;&gt;</span><span class="n">inspos</span><span class="p">;</span><span class="c1">//输入新的数据和位置</span>
</span><span class='line'>  <span class="n">mylist</span><span class="p">.</span><span class="n">list_insert</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="n">inspos</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输出插入后的结果</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//删除指定位置的数据</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">delpos</span><span class="p">;</span><span class="c1">//输入删除位置</span>
</span><span class='line'>  <span class="n">mylist</span><span class="p">.</span><span class="n">list_del</span><span class="p">(</span><span class="n">delpos</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输出删除后的结果</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//获取指定位置的数据</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">getpos</span><span class="p">;</span><span class="c1">//输入查找位置</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">getpos</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//----主程序2-----</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">temp</span><span class="p">,</span><span class="n">temp2</span><span class="p">,</span><span class="n">temp1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SeqList</span> <span class="n">mylist</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">,</span><span class="n">getpos1</span><span class="p">,</span><span class="n">getpos2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mylist</span><span class="p">.</span><span class="n">list_insert</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">getpos1</span><span class="o">&gt;&gt;</span><span class="n">getpos2</span><span class="p">;</span><span class="c1">//交换输入位置的值</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getpos1</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">getpos2</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">temp1</span><span class="o">=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">getpos1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">temp2</span><span class="o">=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">getpos2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mylist</span><span class="p">.</span><span class="n">list_del</span><span class="p">(</span><span class="n">getpos1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mylist</span><span class="p">.</span><span class="n">list_insert</span><span class="p">(</span><span class="n">temp2</span><span class="p">,</span><span class="n">getpos1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mylist</span><span class="p">.</span><span class="n">list_del</span><span class="p">(</span><span class="n">getpos2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mylist</span><span class="p">.</span><span class="n">list_insert</span><span class="p">(</span><span class="n">temp1</span><span class="p">,</span><span class="n">getpos2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">mylist</span><span class="p">.</span><span class="n">list_get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;error&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--图应用之最短路径]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/17/5/"/>
    <updated>2014-03-17T00:42:58+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/17/5</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MaxLen</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span><span class="c1">//设置图最多包含20个顶点</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MaxDist</span><span class="o">=</span><span class="mi">9999</span><span class="p">;</span><span class="c1">//设距离无穷大为9999</span>
</span><span class='line'><span class="c1">//---------------图的定义和初始化-----------------</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Map</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//图的邻接矩阵</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Vexnum</span><span class="p">;</span><span class="c1">//图的顶点数量</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ShortestPath_DIJ</span><span class="p">(</span><span class="kt">int</span> <span class="n">v0</span><span class="p">);</span><span class="c1">//迪杰斯特拉算法求v0到其他顶点的最短路径</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//设置邻接矩阵</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Vexnum</span> <span class="o">=</span> <span class="n">vnum</span><span class="p">;</span><span class="c1">//设置图的结点数</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//邻接矩阵初始化</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MaxDist</span><span class="p">;</span><span class="c1">//假设各个顶点之间距离为无穷大</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//邻接矩阵接受外来参数</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span><span class="c1">//设置顶点i和j之间的实际距离</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span><span class="c1">//如果顶点i和j不相等，应该把距离设为无穷大</span>
</span><span class='line'>              <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MaxDist</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//------------迪杰斯特拉算法求v0到其他顶点的最短路径</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">ShortestPath_DIJ</span><span class="p">(</span><span class="kt">int</span> <span class="n">v0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="n">min</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">Vexnum</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="o">*</span><span class="n">final</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">Vexnum</span><span class="p">];</span><span class="c1">//在求最短路径过程中，标识每个顶点是否被加入集合</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span> <span class="c1">//初始化final数组的所有值为false,表示所有顶点未加入集合</span>
</span><span class='line'>      <span class="n">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> 
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span> <span class="c1">//初始化dist数组，表示v0到其他顶点的初始距离</span>
</span><span class='line'>      <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">v0</span><span class="p">][</span><span class="n">v</span><span class="p">];</span><span class="c1">//从邻接矩阵Matrix中读取第v0行的数据，并分别放入dist数组中</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">dist</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//顶点到自己本身距离为0</span>
</span><span class='line'>  <span class="n">final</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//v0加入集合，开始搜索</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//逐个顶点被选中加入集合</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">min</span><span class="o">=</span><span class="n">MaxDist</span><span class="p">;</span><span class="c1">//初始化min为距离无穷大</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span><span class="c1">//逐个顶点被选中加入集合</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">final</span><span class="p">[</span><span class="n">w</span><span class="p">])</span><span class="c1">//在未加入集合的顶点中，寻找离v0最近的顶点</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">&lt;</span><span class="n">min</span><span class="p">)</span> <span class="c1">//如果顶点w未加入集合，而且v0到w的距离小于min</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">v</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>  <span class="c1">//则设置v=w,且min等于v0到w的距离</span>
</span><span class='line'>                  <span class="n">min</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">w</span><span class="p">];</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>    
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//找出离v0最近的顶点v后，把v加入集合</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span><span class="c1">//更新v0到v再到其他顶点w的距离</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">final</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">min</span><span class="o">+</span><span class="n">Matrix</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">]</span><span class="o">&lt;</span><span class="n">dist</span><span class="p">[</span><span class="n">w</span><span class="p">]))</span> <span class="c1">//如果顶点w未加入集合，且v0到v再到顶点w的距离小于v0到w的距离</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">dist</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">+</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">];</span><span class="c1">//则修改v0到w的距离等于v0到v在到顶点的距离</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="c1">//搜索完毕</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">//输出v0到其他顶点的最短距离</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">v0</span><span class="o">&lt;&lt;</span><span class="sc">&#39;-&#39;</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="sc">&#39;-&#39;</span><span class="o">&lt;&lt;</span><span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">dist</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">final</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="c1">//ShortestPath_DIJ</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="p">,</span><span class="n">j</span> <span class="p">,</span><span class="n">k</span> <span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="n">v0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Map</span> <span class="n">myMap</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>   <span class="c1">//输入图的初始化数据</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">vnum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">SetMatrix</span><span class="p">(</span><span class="n">vnum</span><span class="p">,</span><span class="n">mx</span><span class="p">);</span><span class="c1">//设置图的邻接矩阵</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">v0</span><span class="p">;</span><span class="c1">//输入起点</span>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">ShortestPath_DIJ</span><span class="p">(</span><span class="n">v0</span><span class="p">);</span><span class="c1">//迪杰斯特拉算法求V0到其他顶点的最短路径</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--图搜索算法]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/16/the-fourth-blog/"/>
    <updated>2014-03-16T21:53:03+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/16/the-fourth-blog</id>
    <content type="html"><![CDATA[<h1>图深度优先搜索算法</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//-------图的定义和初始化-----------</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MaxLen</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span><span class="c1">//设定图最多包含20个顶点</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Map</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">Visited</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//访问标识数组，标识每个顶点是否已访问</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//图的领接矩阵</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Vexnum</span><span class="p">;</span><span class="c1">//图的顶点数量</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">);</span><span class="c1">//深度优先，私有函数，内部调用</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">DFSTraverse</span><span class="p">();</span><span class="c1">//公有含糊，被main调用</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//设置领接矩阵</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Vexnum</span> <span class="o">=</span> <span class="n">vnum</span><span class="p">;</span><span class="c1">//设置图的结点数</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//领接矩阵初始化为0</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//领接矩阵初始化</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------深度优先遍历函数-----------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">DFSTraverse</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="c1">//对图g作深度优先遍历，公有函数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span><span class="c1">//把访问标识数组的值全部设为false</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span><span class="c1">//从v=0开始，对所有的顶点进行检查</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span><span class="c1">//如果该顶点未被访问，则调用DFS函数进行深度优先搜索</span>
</span><span class='line'>          <span class="n">DFS</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//深度优先搜索</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span><span class="c1">//从第v个顶点出发递归的深度优先遍历图G</span>
</span><span class='line'><span class="p">{</span><span class="c1">//私有函数，v表示当前顶点</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">w</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="c1">//先对顶点v进行访问</span>
</span><span class='line'>  <span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//设置visit数组的第v个位置为true，表示已访问</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">v</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span><span class="c1">//输出数值v再输出一个空格，表示当前顶点已访问，并用空格隔开</span>
</span><span class='line'><span class="c1">//找出与v相连接的其他所有顶点</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">AdjVex</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">Vexnum</span><span class="p">];</span><span class="c1">//存放v连接的顶点编号</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//把数组AdjVex的值初始化为-1</span>
</span><span class='line'>      <span class="n">AdjVex</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//k表示AdjVex的实际使用长度，也就是和v连接的顶点数量</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//搜索领接矩阵找出与顶点v连接的其他顶点编号</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">Matrix</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="c1">//如果顶点i与顶点v连接，那么领接矩阵的第v行第i个位置的值为1</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">AdjVex</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="c1">//如果找到i与v连接，那么把i放入数组AdjVex的第k个位置，然后k++</span>
</span><span class='line'>          <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//对v的领接顶点进行深度优先遍历</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">w</span><span class="o">=</span><span class="n">AdjVex</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//把AdjVex中的第i个顶点编号放入变量w中</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">w</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span><span class="c1">//如果w不等于-1，则说明还有与v相连的顶点，继续循环</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">Visited</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">==</span><span class="kc">false</span><span class="p">)</span><span class="c1">//如果顶点w尚未访问，对w调用DFS函数进行遍历</span>
</span><span class='line'>              <span class="n">DFS</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">AdjVex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vnum</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Map</span> <span class="n">myMap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//输入图的初始化数据</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">vnum</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">SetMatrix</span><span class="p">(</span><span class="n">vnum</span><span class="p">,</span><span class="n">mx</span><span class="p">);</span><span class="c1">//设置图的领接矩阵</span>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">DFSTraverse</span><span class="p">();</span><span class="c1">//深度优先遍历</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>图广度优先搜索算法</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="c1">//-------图的定义和矩阵初始化-----------</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MaxLen</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span><span class="c1">//设定图最多包含20个顶点</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Map</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">Visited</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//访问标识数组，标识每个顶点是否已访问</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Matrix</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span><span class="c1">//图的领接矩阵</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">Vexnum</span><span class="p">;</span><span class="c1">//图的顶点数量</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">BFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">);</span><span class="c1">//广度优先，私有函数，内部调用</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">BFSTraverse</span><span class="p">();</span><span class="c1">//公有函数，被main调用</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//设置领接矩阵</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">SetMatrix</span><span class="p">(</span><span class="kt">int</span> <span class="n">vnum</span><span class="p">,</span><span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Vexnum</span> <span class="o">=</span> <span class="n">vnum</span><span class="p">;</span><span class="c1">//设置图的结点数</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//领接矩阵初始化为0</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//领接矩阵接受外来参数</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">Matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------------广度优先遍历函数-----------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">BFSTraverse</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="c1">//对图g作深度优先遍历，公有函数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BFS</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Map</span><span class="o">::</span><span class="n">BFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span><span class="c1">//v是当前顶点</span>
</span><span class='line'><span class="p">{</span><span class="c1">//按广度优先非递归遍历图G，使用辅助队列Q和访问标识数组visited</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">w</span><span class="p">,</span><span class="n">u</span><span class="p">;</span><span class="c1">//这些变量用于存放顶点编号</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">AdjVex</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">Vexnum</span><span class="p">];</span><span class="c1">//存放与顶点v相连的其他顶点编号</span>
</span><span class='line'>  <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span><span class="c1">//把访问标志数组的值全设为false</span>
</span><span class='line'>      <span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span><span class="c1">//遍历所有未访问的顶点</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span><span class="c1">//如果v未访问</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//设访问标志数组中的v顶点为ture</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">v</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span><span class="c1">//输出v和空格，表示该顶点已被访问，并用空格隔开</span>
</span><span class='line'>          <span class="n">Q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">);</span><span class="c1">//把v压入队列</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">Q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span><span class="c1">//当队列非空，执行以下循环</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">u</span><span class="o">=</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span><span class="c1">//取队头元素放入u中</span>
</span><span class='line'>              <span class="n">Q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span><span class="c1">//把队头元素弹出</span>
</span><span class='line'>                <span class="c1">//找出与顶点v相连的所有其他顶点，顶点编号放入数组AdjVex中</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//把数组AdjVex的值初始化为-1</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">AdjVex</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//k表示AdjVex的存放顶点的位置下标</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//搜索领接矩阵找出与顶点v连接的其他顶点编号</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">Matrix</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">AdjVex</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="c1">//把编号放入数组AdjVex的第k个位置，然后k++</span>
</span><span class='line'>                      <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//i表示AdjVex数组下标</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//对u的领接顶点进行遍历</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">w</span><span class="o">=</span><span class="n">AdjVex</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="c1">//把AdjVex中的第i个顶点编号放入变量w中</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">w</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span><span class="c1">//如果w不等于-1，则执行循环</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span><span class="n">Visited</span><span class="p">[</span><span class="n">w</span><span class="p">]</span><span class="o">==</span><span class="kc">false</span><span class="p">)</span><span class="c1">//如果顶点w尚未访问</span>
</span><span class='line'>                      <span class="p">{</span>
</span><span class='line'>                          <span class="n">Visited</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//设置第w个顶点已访问</span>
</span><span class='line'>                          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">w</span><span class="o">&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="p">;</span><span class="c1">//输出w和空格，表示该顶点已被访问，并用空格隔开</span>
</span><span class='line'>                          <span class="n">Q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">w</span><span class="p">);</span><span class="c1">//把w压入队列</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span><span class="c1">//while</span>
</span><span class='line'>      <span class="p">}</span><span class="c1">//if</span>
</span><span class='line'>  <span class="p">}</span><span class="c1">//for</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vnum</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mx</span><span class="p">[</span><span class="n">MaxLen</span><span class="p">][</span><span class="n">MaxLen</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Map</span> <span class="n">myMap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="c1">//输入图的初始化数据</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">MaxLen</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">vnum</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">vnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">mx</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">SetMatrix</span><span class="p">(</span><span class="n">vnum</span><span class="p">,</span><span class="n">mx</span><span class="p">);</span><span class="c1">//设置图的领接矩阵</span>
</span><span class='line'>      <span class="n">myMap</span><span class="p">.</span><span class="n">BFSTraverse</span><span class="p">();</span><span class="c1">//广度优先遍历</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure--赫夫曼编码]]></title>
    <link href="http://iolanthe.github.io/blog/2014/03/16/my-third-blog/"/>
    <updated>2014-03-16T16:50:42+08:00</updated>
    <id>http://iolanthe.github.io/blog/2014/03/16/my-third-blog</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>   <span class="c1">//-----------赫夫曼树和结点定义----------</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">MaxW</span> <span class="o">=</span> <span class="mi">99999</span><span class="p">;</span><span class="c1">//假设结点权值不超过99999</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HuffNode</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">weight</span><span class="p">;</span><span class="c1">//权值</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">parent</span><span class="p">;</span><span class="c1">//父节点下标</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">leftchild</span><span class="p">;</span><span class="c1">//左孩子下标</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rightchild</span><span class="p">;</span><span class="c1">//右孩子下标</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//定义哈夫曼树类</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HuffMan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">MakeTree</span> <span class="p">();</span><span class="c1">//建树，私有函数，被公有函数调用</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">SelectMin</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">s2</span> <span class="p">);</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span><span class="c1">//结点数量</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">lnum</span><span class="p">;</span><span class="c1">//叶子数量</span>
</span><span class='line'>  <span class="n">HuffNode</span> <span class="o">*</span><span class="n">huffTree</span><span class="p">;</span><span class="c1">//赫夫曼树，用数组表示</span>
</span><span class='line'>  <span class="n">string</span> <span class="o">*</span><span class="n">huffCode</span><span class="p">;</span><span class="c1">//每个字符对应的赫夫曼编码</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">MakeTree</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">int</span> <span class="n">wt</span><span class="p">[]);</span><span class="c1">//公有函数，被main调用</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Coding</span><span class="p">();</span><span class="c1">//公有函数，被main调用</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">Destory</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//-----------构建huffman树--------------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HuffMan</span><span class="o">::</span><span class="n">MakeTree</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="kt">int</span> <span class="n">wt</span><span class="p">[])</span><span class="c1">//参数是叶子结点数和叶子权值</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//公有函数，对外接口，被main函数调用</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">lnum</span><span class="o">=</span><span class="n">n</span><span class="p">;</span><span class="c1">//设置lnum的值为叶子数量</span>
</span><span class='line'>  <span class="n">len</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="c1">//设置len的值为叶子数量*2-1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">huffCode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">string</span><span class="p">[</span><span class="n">lnum</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="c1">//位置从1开始计算</span>
</span><span class='line'>  <span class="c1">//huffCode实质是个二维字符数组，第i行表示第i个字符对应的编码</span>
</span><span class='line'>  <span class="n">huffTree</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HuffNode</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//赫夫曼树huffTree初始化</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//把huffman前n个结点的权值设为wt的权值，从1开始编号</span>
</span><span class='line'>  <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span><span class="o">=</span><span class="n">wt</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">n</span><span class="p">)</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//前n个结点是叶子已经设值</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">parent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">leftchild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">rightchild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">MakeTree</span><span class="p">();</span><span class="c1">//调用私有函数建树</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HuffMan</span><span class="o">::</span><span class="n">SelectMin</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
</span><span class='line'><span class="c1">//找出的下标会保存在s1和s2中</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">w1</span><span class="p">,</span><span class="n">w2</span><span class="p">,</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">w1</span><span class="o">=</span><span class="n">w2</span><span class="o">=</span><span class="n">MaxW</span><span class="p">;</span><span class="c1">//初始化w1和w2为最大值，在比较中会被实际的权值替换</span>
</span><span class='line'>  <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">pos</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span> <span class="o">&lt;</span> <span class="n">w1</span> <span class="o">&amp;&amp;</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">parent</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">w2</span> <span class="o">=</span> <span class="n">w1</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="o">*</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">w1</span> <span class="o">=</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span> <span class="o">&lt;</span> <span class="n">w2</span> <span class="o">&amp;&amp;</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">parent</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">w2</span> <span class="o">=</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//--------建树与销毁函数-----------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HuffMan</span><span class="o">::</span><span class="n">MakeTree</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="c1">//私有函数，被公有函数调用</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">lnum</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">SelectMin</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s2</span><span class="p">);</span><span class="c1">//找出的下标值会放入s1和s2中</span>
</span><span class='line'>      <span class="c1">//设置s1和s2的父亲，并作相关修改</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">s1</span><span class="p">].</span><span class="n">parent</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="c1">//设置s1的父亲 </span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">s2</span><span class="p">].</span><span class="n">parent</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span><span class="c1">//设置s2的父亲</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span> <span class="o">=</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">s1</span><span class="p">].</span><span class="n">weight</span> <span class="o">+</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">s2</span><span class="p">].</span><span class="n">weight</span><span class="p">;</span><span class="c1">//设置父亲的权值</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">leftchild</span> <span class="o">=</span> <span class="n">s1</span><span class="p">;</span>  <span class="c1">//设置父亲的左孩子</span>
</span><span class='line'>      <span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">rightchild</span> <span class="o">=</span> <span class="n">s2</span><span class="p">;</span><span class="c1">//设置父亲的右孩子</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//销毁赫夫曼树</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HuffMan</span><span class="o">::</span><span class="n">Destory</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">lnum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">huffTree</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">huffCode</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//-------------赫夫曼编码------------</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HuffMan</span><span class="o">::</span><span class="n">Coding</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">cd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">f</span><span class="p">,</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="c1">//求n个叶结点的哈夫曼编码</span>
</span><span class='line'>  <span class="n">cd</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">lnum</span><span class="p">];</span><span class="c1">//cd是临时字符串，临时保存每个字符的编码</span>
</span><span class='line'>  <span class="n">cd</span><span class="p">[</span><span class="n">lnum</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span><span class="c1">//编码结束符</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">lnum</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="c1">//逐个字符求哈夫曼编码</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="n">lnum</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="c1">//编码结束符位置</span>
</span><span class='line'>      <span class="n">c</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="c1">//当前结点</span>
</span><span class='line'>      <span class="n">f</span><span class="o">=</span><span class="n">huffTree</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">parent</span><span class="p">;</span><span class="c1">//当前节点的父亲</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//从叶子到根逆向求编码</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">f</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span><span class="c1">//如果父亲f的左孩子等于c,则编码取0，这里包含2行代码</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">huffTree</span><span class="p">[</span><span class="n">f</span><span class="p">].</span><span class="n">leftchild</span><span class="o">==</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cd</span><span class="p">[</span><span class="o">--</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">else</span> <span class="n">cd</span><span class="p">[</span><span class="o">--</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span><span class="c1">//否则，编码取1</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span><span class="c1">//c指向父亲</span>
</span><span class='line'>          <span class="n">f</span> <span class="o">=</span> <span class="n">huffTree</span><span class="p">[</span><span class="n">f</span><span class="p">].</span><span class="n">parent</span><span class="p">;</span><span class="c1">//f指向上一层父亲</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//把cd中从start到末尾的编码复制到huffCode中</span>
</span><span class='line'>      <span class="n">huffCode</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">assign</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cd</span><span class="p">[</span><span class="n">start</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">delete</span> <span class="p">[]</span><span class="n">cd</span><span class="p">;</span><span class="c1">//释放工作空间</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//-------------------主函数------------</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">wt</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="n">HuffMan</span> <span class="n">myHuff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">t</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">wt</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="n">myHuff</span><span class="p">.</span><span class="n">MakeTree</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">wt</span><span class="p">);</span><span class="c1">//建树</span>
</span><span class='line'>      <span class="n">myHuff</span><span class="p">.</span><span class="n">Coding</span><span class="p">();</span><span class="c1">//编码</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">myHuff</span><span class="p">.</span><span class="n">huffTree</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">weight</span><span class="o">&lt;&lt;</span><span class="sc">&#39;-&#39;</span><span class="p">;</span><span class="c1">//输出各权值</span>
</span><span class='line'>          <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">myHuff</span><span class="p">.</span><span class="n">huffCode</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span><span class="c1">//输出各编码</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">myHuff</span><span class="p">.</span><span class="n">Destory</span><span class="p">();</span><span class="c1">//销毁</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
